Function New-OutputFolder {
<#

    .SYNOPSIS
    Function intended for preparing a PowerShell object for output/create folders for e.g. reports or logs.

    .DESCRIPTION
    Function intended for preparing a PowerShell custom object what contains e.g. folder name for output/create folders. The name is prepared based on prefix, middle name part, suffix, date, etc. with verification if provided path exist and is it writable.

    Returned object contains properties
    - ParentPath - to use it please check an examples - as a [System.IO.DirectoyInfo]
    - ExitCode
    - ExitCodeDescription

    Exit codes and descriptions
    0 = "Everything is fine :-)"
    1 = "Provided path <PATH> doesn't exist
    2 = Empty code
    3 = "Provided patch <PATH> is not writable"
    4 = "The folder <PATH>\\<FOLDER_NAME> already exist  - can't be overwritten"
    5 = "The folder <PATH>\\<FOLDER_NAME> already exist  - can be overwritten"

    .PARAMETER ParentPath
    By default output folders are stored in the current path

    .PARAMETER OutputFolderNamePrefix
    Prefix used for creating output folders name

    .PARAMETER OutputFolderNameMidPart
    Part of the name which will be used in midle of output folder name

    .PARAMETER OutputFolderNameSuffix
    Part of the name which will be used at the end of output folder name

    .PARAMETER IncludeDateTimePartInOutputFolderName
    Set to TRUE if report folder name should contains part based on date and time - format yyyyMMdd is used

    .PARAMETER DateTimePartInOutputFolderName
    Set to date and time which should be used in output folder name, by default current date and time is used
    
    .PARAMETER NamePartsSeparator
    A char used to separate parts in the name, by default "-" is used

    .PARAMETER BreakIfError
    Break function execution if parameters provided for output folder creation are not correct or destination folder path is not writables

    .EXAMPLE

    PS \> $PerServerReportFolderMessages = New-OutputFolder -ParentPath 'C:\USERS\Wojtek\' -OutputFolderNamePrefix 'Messages' `
                                                                    -OutputFolderNameMidPart 'COMPUTERNAME' `
                                                                    -IncludeDateTimePartInOutputFolderName:$true `
                                                                    -BreakIfError

    PS \> $PerServerReportFolderMessages | Format-List

    ParentPath                                           ExitCode ExitCodeDescription
    --------------                                           -------- -------------------
    C:\users\wojtek\Messages-COMPUTERNAME-20151021-0012-.txt        0 Everything is fine :-)

    .EXAMPLE

    PS \> $PerServerReportFolderMessages = New-OutputFolder -ParentPath 'C:\USERS\Wojtek\' -OutputFolderNamePrefix 'Messages' `
                                                                    -OutputFolderNameMidPart 'COMPUTERNAME' -IncludeDateTimePartInOutputFolderName:$true
                                                                     -OutputFolderNameSuffix suffix `
                                                                    -BreakIfError


    PS \> $PerServerReportFolderMessages.ParentPath | select Name,Directory | Format-List

    Name      : Messages-COMPUTERNAME-20151022-235607-suffix.rxc
    Directory : C:\USERS\Wojtek

    PS \> ($PerServerReportFolderMessages.ParentPath).gettype()

    IsPublic IsSerial Name                                     BaseType
    -------- -------- ----                                     --------
    True     True     FolderInfo                                 System.IO.DirectorySystemInfo

    .OUTPUTS
    System.Object[]

    .LINK
    https://github.com/it-praktyk/New-OutputObject

    .LINK
    https://www.linkedin.com/in/sciesinskiwojciech

    .NOTES
    AUTHOR: Wojciech Sciesinski, wojciech[at]sciesinski[dot]net  
    KEYWORDS: PowerShell, Folder, FileSystem  
    
    CURRENT VERSION
    - 0.3.0 - 2016-11-11
    
    HISTORY OF VERSIONS  
    https://github.com/it-praktyk/New-OutputObject/VERSIONS.md

    REMARKS
    - The warning generated by PSScriptAnalyzer "Function 'New-OutputFolder' has verb that could change system state. Therefore, the function has to support 'ShouldProcess'." is acceptable.

    LICENSE
    Copyright (c) 2016 Wojciech Sciesinski  
    This function is licensed under The MIT License (MIT)  
    Full license text: https://opensource.org/licenses/MIT

    #>
    
    [cmdletbinding()]
    [OutputType([System.Object[]])]
    param (
        [parameter(Mandatory = $false)]
        [String]$ParentPath = ".",
        [parameter(Mandatory = $false)]
        [String]$OutputFolderNamePrefix = "Output",
        [parameter(Mandatory = $false)]
        [String]$OutputFolderNameMidPart = $null,
        [parameter(Mandatory = $false)]
        [String]$OutputFolderNameSuffix = $null,
        [parameter(Mandatory = $false)]
        [Bool]$IncludeDateTimePartInOutputFolderName = $true,
        [parameter(Mandatory = $false)]
        [Nullable[DateTime]]$DateTimePartInOutputFolderName = $null,
        [parameter(Mandatory = $false)]
        [alias("Separator")]
        [String]$NamePartsSeparator="-",
        [parameter(Mandatory = $false)]
        [Switch]$BreakIfError

    )

    #Declare variable

    [Int]$ExitCode = 0

    [String]$ExitCodeDescription = "Everything is fine :-)"

    $Result = New-Object -TypeName PSObject

    #Convert relative path to absolute path
    [String]$ParentPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($ParentPath)

    #Assign value to the variable $IncludeDateTimePartInOutputFolderName if is not initialized
    If ($IncludeDateTimePartInOutputFolderName -and ($null -eq $DateTimePartInOutputFolderName)) {

        [String]$DateTimePartInFolderNameString = $(Get-Date -format yyyyMMdd)

    }
    Else {

        [String]$DateTimePartInFolderNameString = $(Get-Date -Date $DateTimePartInOutputFolderName -format yyyyMMdd)

    }
    
    #Check if Output directory exist 
    If (-not (Test-Path -Path $ParentPath -PathType Container)) {
        
        [Int]$ExitCode = 1
        
        $MessageText = "Provided path $ParentPath doesn't exist"
        
        [String]$ExitCodeDescription = $MessageText
        
    }
    
    
    #Try if Output directory is writable - temporary folder is stored
    
    Else {
        
        Try {
            
            [String]$TempFolderName = [System.IO.Path]::GetRandomFileName -replace '.*\\', ''
            
            [String]$TempFolderPath = "{0}{1}" -f $ParentPath, $TempFolderName
            
            New-Item -Path $TempFolderPath -type Directory -ErrorAction Stop | Out-Null
            
        }
        Catch {
            
            [String]$MessageText = "Provided path {0} is not writable" -f $ParentPath
            
            If ($BreakIfError.IsPresent) {
                
                Throw $MessageText
                
            }
            Else {
                
                [Int]$ExitCode = 3
                
                [String]$ExitCodeDescription = $MessageText
                
            }
            
        }
        
        Remove-Item -Path $TempFolderPath -ErrorAction SilentlyContinue | Out-Null
        
    }
    
    #Constructing the folder name
    If (!($IncludeDateTimePartInOutputFolderName) -and !([String]::IsNullOrEmpty($OutputFolderNameMidPart)) ) {

        [String]$ParentPathTemp1 = "{0}\{1}{3}{2}" -f $ParentPath, $OutputFolderNamePrefix, $OutputFolderNameMidPart, $NamePartsSeparator

    }
    Elseif (!($IncludeDateTimePartInOutputFolderName) -and [String]::IsNullOrEmpty($OutputFolderNameMidPart )) {

        [String]$ParentPathTemp1 = "{0}\{1}" -f $ParentPath, $OutputFolderNamePrefix

    }
    ElseIf ($IncludeDateTimePartInOutputFolderName -and !([String]::IsNullOrEmpty($OutputFolderNameMidPart))) {

        [String]$ParentPathTemp1 = "{0}\{1}{4}{2}{4}{3}" -f $ParentPath, $OutputFolderNamePrefix, $OutputFolderNameMidPart, $DateTimePartInFolderNameString, $NamePartsSeparator

    }
    Else {

        [String]$ParentPathTemp1 = "{0}\{1}{3}{2}" -f $ParentPath, $OutputFolderNamePrefix, $DateTimePartInFolderNameString, $NamePartsSeparator
        
    }
    
    
    If ( [String]::IsNullOrEmpty($OutputFolderNameSuffix)) {

        [String]$ParentPathTemp = "{0}" -f $ParentPathTemp1

    }
    Else {

        [String]$ParentPathTemp = "{0}{2}{1}" -f $ParentPathTemp1, $OutputFolderNameSuffix, $NamePartsSeparator

    }

    #Replacing doubled chars \\ , -- , .. - except if \\ is on begining - means that path is UNC share
    [System.IO.DirectoryInfo]$ParentPath = "{0}{1}" -f $ParentPathTemp.substring(0, 2), (($ParentPathTemp.substring(2, $ParentPathTemp.length - 2).replace("\\", '\')).replace("--", "-")).replace("..", ".")

    If ($ErrorIfOutputFolderExist -and (Test-Path -Path $ParentPath -PathType Container)) {
        
        
        #Dialog for decision if Force was not set or Overwrite All not selected previously
        [String]$Title = "Overwrite Folder"
        
        [String]$MessageText = "The folder {0} already exist" -f $ParentPath
                
        $yes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes", `
                          "The folder already exists. Overwrite the existing folder."
        
        #$yesall = New-Object System.Management.Automation.Host.ChoiceDescription "&All", `
        #                     "Overwrite the all existing folders."
        
        $no = New-Object System.Management.Automation.Host.ChoiceDescription "&No", `
                         "Retain the existing folder."
        
        #$noall = New-Object System.Management.Automation.Host.ChoiceDescription "N&o for All", `
        #                   "Retain the all existing folders."
        
        $cancel = New-Object System.Management.Automation.Host.ChoiceDescription "&Cancel", `
                             "Cancel."
        
        $options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no, $cancel)
        
        $Answer = $host.ui.PromptForChoice($Title, $MessageText, $Options, 0)
        
        switch ($Answer) {
            
            0 {
                                
                [Int]$ExitCode = 4
                
                [String]$ExitCodeDescription = $MessageText
                
            }
            
            1 {
                
                [Int]$ExitCode = 4
                
                [String]$ExitCodeDescription = $MessageText
                
            }
            
            2 {
                
               Throw $MessageText 
                
            }
            
        }
 
    }

    $Result | Add-Member -MemberType NoteProperty -Name ParentPath -Value $ParentPath

    $Result | Add-Member -MemberType NoteProperty -Name ExitCode -Value $ExitCode

    $Result | Add-Member -MemberType NoteProperty -Name ExitCodeDescription -Value $ExitCodeDescription

    Return $Result

}
